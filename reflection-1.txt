cd ~                          			# change directories to your home directory
mkdir version-control         			# make version-control directory
cd version-control            			# go to version-control directory
mkdir reflections             			# create reflections directory
cd reflections                			# go to reflections directory

$ alias notepad++="/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe"
notepad++ lesson_1_reflections.txt 		# launch sublime with file called lesson_1_reflections.txt 
										 (you can replace notepad++ with another editor here if you prefer a different one)
										 
diff -u ... ...	== git diff ... ...		# compare between 2 commits
pwd 									# print working directory - shows what directory you are in
ls  									# list the files in this directory
git status 								# show which file has changed since last commit
git log 								# show statistics about which files have changed in each commit
git clone https://githu...asteroids.git	# clone repository from github
git config --global color.ui auto		# colored diff output (Green for add, Red for remov)
git diff ID1 ID2						# show differances betweent two commit
git checkout ID							# reset all files to how they at the time that commit was made
git commit -m "First commit				# Commits the tracked changes and prepares them to be pushed to a remote repository. 
										 To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit 
										 and add the file again.
git branch aaa							# make a new branch named aaa
git checkout aaa						# make aaa current branch
git checkout -b aaa						# make a new branch named aaa and make it the current				 
git mirge aaa							# merge aaa branch with the current	branch
git show ddd							# show difference between commit ddd & it's parents			 
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
Error messages

-Should not be doing an octopus
 Octopus is a strategy Git uses to combine many different versions of code together.
 This message can appear if you try to use this strategy in an inappropriate situation.

-You are in 'detached HEAD' state
 HEAD is what Git calls the commit you are currently on. 
 You can “detach” the HEAD by switching to a previous commit, 
 which we’ll see in the next video. Despite what it sounds like, 
 it’s actually not a bad thing to detach the HEAD. 
 Git just warns you so that you’ll realize you’re doing it.

-Panic! (the 'impossible' happened)
 This is a real error message, but it’s not output by Git. 
 Instead it’s output by GHC, the compiler for a programming language called Haskell. 
 It’s reserved for particularly surprising errors!
 
-Leave 'detached HEAD' state
 Right now, your HEAD should still be 'detached' from Lesson 1 when you checked out an old commit. 
 To fix that, run the command git checkout master. 
 You'll learn more about what this command does later this lesson.
 ـــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
 
 When you initialize the repository, Git doesn’t create any commits for you. You’ll have to create the first commit yourself.